<?php
/**
  * This file contains the Pipegrep Class.
  *
  * Pipegrep Class contain common methods used throughout the framework.
  *
  *
  *
  * @author  Rogerio Albandes <rogerio.albandes@gmail.com>
  *
  * @since 0.0.10
  * @package    helpdezk
  * @subpackage pipegrep  
  *
  */

/**
 * Contains common methods
 *
 * The class contains common methods used throughout the framework.
 *
 * @package    helpdezk
 * @subpackage pipegrep
 * @author Rogerio Albandes <rogerio.albandes@gmail.com>
 */ 
class pipegrep  {
	/**
	* Create the condition for the query of mysql from the dates generated by the calendar of the form
	*
	* @access public
	* @param string $date_field Name field of date .
	* @param string $date_from  Start date
	* @param string $date_to Final date
	* @param string $lang Language Country Code
	* @return string condition for the query
	*/
	public function mysql_date_condition ($date_field, $date_from , $date_to,$lang)
	{
        if($date_from && $date_to){
			$date_from = $this->date_to_mysql($date_from,$lang) ;
			$date_to = $this->date_to_mysql($date_to,$lang) ;
			$date_interval = " DATE($date_field) between '$date_from' and '$date_to'";
        }
		elseif($date_from && !$date_to){
			$date_from = $this->date_to_mysql($date_from,$lang) ;
			$date_interval = " DATE($date_field) > '$date_from'";
		}
		elseif(!$date_from && $date_to){
			$date_to = $this->date_to_mysql($date_to,$lang) ;
			$date_interval = " DATE($date_field) < '$date_to'";
		}
        
		return $date_interval ;
	}

	/**
	* Create the condition for the query of oracle from the dates generated by the calendar of the form
	*
	* @access public
	* @param string $date_field Name field of date .
	* @param string $date_from  Start date
	* @param string $date_to Final date
	* @param string $lang Language Country Code
	* @return string condition for the query
	*/
	// changed 30/09/2014 09:27 Rafael Stoever
	public function oracle_date_condition ($date_field, $date_from , $date_to,$lang)
	{
        if($date_from && $date_to){
			$date_from = $this->date_to_oracle($date_from,$lang) ;
			$date_to = $this->date_to_oracle($date_to,$lang) ;
			$date_interval = " $date_field between to_date('$date_from','YYYY-MM-DD') and to_date('$date_to 23:59:59','YYYY-MM-DD hh24:mi:ss')";
			//$date_interval = " ( $date_field >= to_date('$date_from','YYYY-MM-DD') or $date_field <= to_date('$date_to','YYYY-MM-DD') )";
        }
		elseif($date_from && !$date_to){
			$date_from = $this->date_to_oracle($date_from,$lang) ;
			$date_interval = " $date_field > to_date('$date_from','YYYY-MM-DD')";
		}
		elseif(!$date_from && $date_to){
			$date_to = $this->date_to_oracle($date_to,$lang) ;
			$date_interval = " $date_field < to_date('$date_to','YYYY-MM-DD')";
		}
        
		return $date_interval ;
	}
	/**	
	* Convert a date to oracle format [AAAA-MM-DD]
	*
	* @access public
	* @param string $date Date to convert.
	* @param string $lang Language Country Code
	* @return string String Mysql format
	*/
	// changed 30/09/2014 09:27 Rafael Stoever
	public function date_to_oracle ($date,$lang) 
	{
		$aDate = explode("/",$date);
	    if($lang == "pt_BR"){
			$mysql = $aDate[2]."-".$aDate[1]."-".$aDate[0]; 
	    }else{
	      	$mysql = $aDate[2]."-".$aDate[0]."-".$aDate[1];
	    }
		return $mysql;
	}
	/**	
	* Convert a date to mysql format [AAAA-MM-DD]
	*
	* @access public
	* @param string $date Date to convert.
	* @param string $lang Language Country Code
	* @return string String Mysql format
	*/
	public function date_to_mysql ($date,$lang) 
	{
		$aDate = explode("/",$date);
	    if($lang == "pt_BR"){
			$mysql = $aDate[2]."-".$aDate[1]."-".$aDate[0]; 
	    }else{
	      	$mysql = $aDate[2]."-".$aDate[0]."-".$aDate[1];
	    }
		return $mysql;
	}

	public function conv_sec_hour($seconds){
		
	}

	/**
	* Convert time [minutes] for hours and minutes [99h99min]
	*
	* @access public
	* @param string|int $minutes Time in minutes.
	* @return string Formatted time [99h99min]
	*/
	public function conv_minute_hour($minutes){
		return gmdate("H:i:s", $minutes*60);
		/*
		$ret = "";
		$hour = "";
		$min = "";

		$remainder = $minutes;

		if ($remainder >= 60){
			$hour = substr(($remainder/60), 0, strpos($remainder/60, "."));
			if (!$hour){
				$hour = $remainder/60;
			}else{
				$min = "0".substr(($remainder/60), strpos($remainder/60, "."), strlen($remainder/60)) * 60; 	
			}
		}else{
			$min = $remainder; 	
		}

		$min = round($min);
		if ($min >= 60){
			$aux = $min / 60;
			$hour += substr(($aux), 0, strpos($aux, "."));
			$min = (substr(($aux), strpos($aux, ".")+1, strlen($aux))) * 60;
		} 

		if ($hour) $ret .= $hour." h ";
		if ($min) $ret .= $min. " min ";
		if(!$ret) $ret = "0 min";
		
		return $ret;
		*/
	}
	

	/**
	* Mathod to create random passwords
	*
	* @author Thiago Belem <contato@thiagobelem.net>
	*
	* @param integer $tamanho Size of the new password
	* @param boolean $maiusculas If it will have capital letters 
	* @param boolean $numeros If it will have numbers
	* @param boolean $simbolos  If it will have symbols
	*
	* @return string A senha gerada 
	*/
	public function generateRandomPassword($tamanho = 8, $maiusculas = true, $numeros = true, $simbolos = false)
	{
		$lmin = 'abcdefghijklmnopqrstuvwxyz';
		$lmai = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';
		$num = '1234567890';
		$simb = '!@#$%*-';
		$retorno = '';
		$caracteres = '';

		$caracteres .= $lmin;
		if ($maiusculas) $caracteres .= $lmai;
		if ($numeros) $caracteres .= $num;
		if ($simbolos) $caracteres .= $simb;

		$len = strlen($caracteres);
		for ($n = 1; $n <= $tamanho; $n++) 
		{
			$rand = mt_rand(1, $len);
			$retorno .= $caracteres[$rand-1];
		}
		return $retorno;
	}



}


?>
