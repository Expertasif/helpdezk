insert into hdk_tbconfig (idconfig,name,description,idconfigcategory,session_name,field_type,status,smarty,value)
values ('104','Email Port',NULL,'5','EM_PORT',NULL,'A','em_port','');
-- [PIPE]
CREATE TABLE HDK_BASE_CATEGORY
   (	
   "IDCATEGORY" NUMBER(10,0) NOT NULL PRIMARY KEY, 
    "NAME" VARCHAR2(100 CHAR) NOT NULL, 
    "IDCATEGORY_REFERENCE" NUMBER(10,0)
   );
-- [PIPE]
CREATE SEQUENCE HDK_BASE_CATEGORY_seq
	   MINVALUE 1
	   MAXVALUE 999999999999999999999999999
	   INCREMENT BY 1
	   START WITH 1;
-- [PIPE]
CREATE OR REPLACE TRIGGER "HDK_BASE_CATEGORY_TRG" BEFORE INSERT ON HDK_BASE_CATEGORY
FOR EACH ROW
BEGIN
  <<COLUMN_SEQUENCES>>
  BEGIN
		IF :NEW.IDCATEGORY IS NULL THEN
		  SELECT HDK_BASE_CATEGORY_SEQ.NEXTVAL INTO :NEW.IDCATEGORY FROM DUAL;
		END IF;
  END COLUMN_SEQUENCES;
END;
-- [PIPE]
CREATE TABLE HDK_BASE_KNOWLEDGE
   (	
    "IDBASE" NUMBER(10,0) NOT NULL PRIMARY KEY, 
    "IDCATEGORY" NUMBER(10,0) NOT NULL, 
    "NAME" VARCHAR2(100 CHAR) NOT NULL, 
    "PROBLEM" CLOB NOT NULL,
    "SOLUTION" CLOB NOT NULL,
    "DATE_REGISTER" DATE NOT NULL,
    "IDPERSON" NUMBER(10,0) NOT NULL, 
    "DATE_EDIT" DATE,
    "IDPERSON_EDIT" NUMBER(10,0), 
    "FAQ" NUMBER(1,0) DEFAULT '0'
   );
-- [PIPE]
ALTER TABLE HDK_BASE_KNOWLEDGE ADD CONSTRAINT FK_BASE_IDPERSON FOREIGN KEY (IDPERSON) REFERENCES TBPERSON(IDPERSON);
-- [PIPE]
ALTER TABLE HDK_BASE_KNOWLEDGE ADD CONSTRAINT FK_BASE_IDPERSON_EDIT FOREIGN KEY (IDPERSON_EDIT) REFERENCES TBPERSON(IDPERSON);
-- [PIPE]
ALTER TABLE HDK_BASE_KNOWLEDGE ADD CONSTRAINT FK_BASE_CATEGORY FOREIGN KEY (IDCATEGORY) REFERENCES HDK_BASE_CATEGORY(IDCATEGORY);
-- [PIPE]
CREATE SEQUENCE HDK_BASE_KNOWLEDGE_seq
	   MINVALUE 1
	   MAXVALUE 999999999999999999999999999
	   INCREMENT BY 1
	   START WITH 1;
-- [PIPE]
CREATE OR REPLACE TRIGGER "HDK_BASE_KNOWLEDGE_TRG" BEFORE INSERT ON HDK_BASE_KNOWLEDGE
FOR EACH ROW
BEGIN
  <<COLUMN_SEQUENCES>>
  BEGIN
		IF :NEW.IDBASE IS NULL THEN
		  SELECT HDK_BASE_KNOWLEDGE_seq.NEXTVAL INTO :NEW.IDBASE FROM DUAL;
		END IF;
  END COLUMN_SEQUENCES;
END;
-- [PIPE]
CREATE TABLE HDK_BASE_ATTACHMENT
   (	
    "IDATTACHMENT" NUMBER(10,0) NOT NULL PRIMARY KEY, 
    "FILENAME" VARCHAR2(200 CHAR) NOT NULL, 
    "IDBASE" NUMBER(10,0) NOT NULL, 
    "REAL_FILENAME" VARCHAR2(200 CHAR) NOT NULL
   );
-- [PIPE]
ALTER TABLE HDK_BASE_ATTACHMENT ADD CONSTRAINT FK_ATTACHMENT_IDBASE FOREIGN KEY (IDBASE) REFERENCES HDK_BASE_KNOWLEDGE(IDBASE);
-- [PIPE]
CREATE SEQUENCE HDK_BASE_ATTACHMENT_seq
	   MINVALUE 1
	   MAXVALUE 999999999999999999999999999
	   INCREMENT BY 1
	   START WITH 1;
-- [PIPE]
CREATE OR REPLACE TRIGGER "HDK_BASE_ATTACHMENT_TRG" BEFORE INSERT ON HDK_BASE_ATTACHMENT
FOR EACH ROW
BEGIN
  <<COLUMN_SEQUENCES>>
  BEGIN
		IF :NEW.IDATTACHMENT IS NULL THEN
		  SELECT HDK_BASE_ATTACHMENT_seq.NEXTVAL INTO :NEW.IDATTACHMENT FROM DUAL;
		END IF;
  END COLUMN_SEQUENCES;
END;
-- [PIPE]
DROP TABLE hdk_tbrequest_dates;
-- [PIPE]
DROP SEQUENCE hdk_tbrequest_dates_id_SEQ;
-- [PIPE]
CREATE TABLE HDK_TBREQUEST_DATES
   (	
    "IDREQUESTDATE" NUMBER(10,0) NOT NULL PRIMARY KEY,
    "CODE_REQUEST" VARCHAR2(20 CHAR) NOT NULL,
    "FORWARDED_DATE" DATE,
    "APPROVAL_DATE" DATE,
    "FINISH_DATE" DATE,
    "REJECTION_DATE" DATE,
    "ASSUME_DATE" DATE   
   );
-- [PIPE]
CREATE INDEX IDX_TBHDKDATES_CODEREQUEST ON "HDK_TBREQUEST_DATES" ("CODE_REQUEST");
-- [PIPE]
CREATE SEQUENCE hdk_tbrequest_dates_id_SEQ
	   MINVALUE 1
	   MAXVALUE 999999999999999999999999999
	   INCREMENT BY 1
	   START WITH 1;
-- [PIPE]
CREATE OR REPLACE TRIGGER "HDK_TBREQUEST_DATES_TRG" BEFORE INSERT ON HDK_TBREQUEST_DATES
FOR EACH ROW
BEGIN
  <<COLUMN_SEQUENCES>>
  BEGIN
		IF :NEW.IDREQUESTDATE IS NULL THEN
		  SELECT hdk_tbrequest_dates_id_SEQ.NEXTVAL INTO :NEW.IDREQUESTDATE FROM DUAL;
		END IF;
  END COLUMN_SEQUENCES;
END;
-- [PIPE]
UPDATE tbperson SET cod_location = NULL WHERE cod_location = 0;
-- [PIPE]
ALTER TABLE TBPERSON ADD CONSTRAINT FK_PERSON_LOCATION FOREIGN KEY (COD_LOCATION) REFERENCES TBLOCATION(IDLOCATION);
-- [PIPE]
insert into hdk_tbconfig (name, description, idconfigcategory, session_name, field_type, status, smarty, value) values('POP Domain',NULL,'12','POP_DOMAIN',NULL,'A','pop_domain','');